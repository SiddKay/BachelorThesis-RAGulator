-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Sessions table
CREATE TABLE sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    last_accessed TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE sessions IS 'Stores information about evaluation sessions';

-- Chains table
CREATE TABLE chains (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    file_name VARCHAR(255) NOT NULL,
    file_path VARCHAR(255) NOT NULL,
    imported_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(file_path)
);
COMMENT ON TABLE chains IS 'Stores information about LangChain expression chains available for evaluation';

-- Questions table
CREATE TABLE questions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    question_text TEXT NOT NULL,
    expected_answer TEXT,
    FOREIGN KEY (session_id) REFERENCES sessions(id)
);
COMMENT ON TABLE questions IS 'Stores evaluation questions associated with sessions';

-- Session_chains junction table
CREATE TABLE session_chains (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    chain_id UUID NOT NULL REFERENCES chains(id),
    is_primary BOOLEAN NOT NULL DEFAULT false,
    added_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(session_id, chain_id),
    FOREIGN KEY (session_id) REFERENCES sessions(id),
    FOREIGN KEY (chain_id) REFERENCES chains(id)
);
COMMENT ON TABLE session_chains IS 'Junction table linking sessions with chains, allowing multiple chains per session';

-- Session configurations table
CREATE TABLE session_configs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    session_chain_id UUID NOT NULL REFERENCES session_chains(id) ON DELETE CASCADE,
    prompt_template JSONB NOT NULL,
    model_params JSONB NOT NULL,
    version_number INTEGER NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (session_id) REFERENCES sessions(id),
    FOREIGN KEY (session_chain_id) REFERENCES session_chains(id),
    UNIQUE(session_chain_id, version_number)
);
COMMENT ON TABLE session_configs IS 'Stores different configurations used for chain evaluations';

-- Answers table
CREATE TABLE answers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    question_id UUID NOT NULL REFERENCES questions(id) ON DELETE CASCADE,
    session_config_id UUID NOT NULL REFERENCES session_configs(id),
    session_chain_id UUID NOT NULL REFERENCES session_chains(id),
    generated_text TEXT NOT NULL,
    score INTEGER CHECK (score >= 0 AND score <= 5),
    comments TEXT,
    generated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (question_id) REFERENCES questions(id),
    FOREIGN KEY (session_config_id) REFERENCES session_configs(id),
    FOREIGN KEY (session_chain_id) REFERENCES session_chains(id)
);
COMMENT ON TABLE answers IS 'Stores answers generated by chains for each question';

-- Create indexes for frequently accessed columns
CREATE INDEX idx_sessions_last_accessed ON sessions(last_accessed);
CREATE INDEX idx_questions_session_id ON questions(session_id);
CREATE INDEX idx_session_chains_session_id ON session_chains(session_id);
CREATE INDEX idx_session_configs_session_id ON session_configs(session_id);
CREATE INDEX idx_answers_question_id ON answers(question_id);
CREATE INDEX idx_answers_session_config_id ON answers(session_config_id);


-- Helpful Views

-- View: Latest session activity
CREATE OR REPLACE VIEW latest_sessions AS
SELECT 
    s.id,
    s.name,
    s.description,
    s.last_accessed,
    COUNT(DISTINCT q.id) as question_count,
    COUNT(DISTINCT sc.id) as chain_count,
    COUNT(DISTINCT a.id) as answer_count
FROM sessions s
LEFT JOIN questions q ON s.id = q.session_id
LEFT JOIN session_chains sc ON s.id = sc.session_id
LEFT JOIN answers a ON q.id = a.question_id
GROUP BY s.id, s.name, s.description, s.last_accessed
ORDER BY s.last_accessed DESC;

COMMENT ON VIEW latest_sessions IS 'Provides an overview of sessions with their question and answer counts';

-- Helpful Triggers

-- Trigger: Update last_accessed timestamp
CREATE OR REPLACE FUNCTION update_session_access()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE sessions 
    SET last_accessed = CURRENT_TIMESTAMP 
    WHERE id = NEW.session_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
COMMENT ON FUNCTION update_session_access() IS 'Updates the last_accessed timestamp of a session when related entities are modified';

-- Apply trigger to relevant tables
CREATE TRIGGER session_access_questions
    AFTER INSERT ON questions
    FOR EACH ROW
    EXECUTE FUNCTION update_session_access();

CREATE TRIGGER session_access_configs
    AFTER INSERT ON session_configs
    FOR EACH ROW
    EXECUTE FUNCTION update_session_access();

CREATE TRIGGER session_access_answers
    AFTER INSERT ON answers
    FOR EACH ROW
    EXECUTE FUNCTION update_session_access();

-- Trigger: Auto-increment config version number
CREATE OR REPLACE FUNCTION set_config_version()
RETURNS TRIGGER AS $$
BEGIN
    SELECT COALESCE(MAX(version_number), 0) + 1
    INTO NEW.version_number
    FROM session_configs
    WHERE session_chain_id = NEW.session_chain_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
COMMENT ON FUNCTION set_config_version() IS 'Automatically sets the version number for new configurations';

CREATE TRIGGER auto_version_config
    BEFORE INSERT ON session_configs
    FOR EACH ROW
    EXECUTE FUNCTION set_config_version();
